package fr.gsb.app.modeles;

import fr.gsb.app.entites.Praticien;
import fr.gsb.app.entites.RapportVisite;
import fr.gsb.app.entites.Visiteur ;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.Statement;

import fr.gsb.app.techniques.ConnexionBD;
import fr.gsb.app.techniques.ConnexionException;

public class ModeleAppliRV {
	
	private static ModeleAppliRV modele = null ;
	
	private ModeleAppliRV() {
		super(); 
	}

	public static ModeleAppliRV getModele() {
		if (modele == null) {
			modele = new ModeleAppliRV() ;
		}
		return modele;
	}

	public boolean seConnecter(String login, String mdp) throws Exception {
		// Récupère une connexion à la base de données
		Connection connexion = ConnexionBD.getConnexion() ;
	
		// Chaîne représentant la requête
		String requete = "select *" 
				+ " from VISITEUR V inner join TRAVAILLER T"
				+ " on V.VIS_MATRICULE = T.VIS_MATRICULE"
				+ " where V.VIS_MATRICULE = ?"
				+ " and V.MDP = ?" 
				+ " and T.TRA_ROLE = 'Délégué' ";
		
		// Prépare la requête
		PreparedStatement requetePreparee = (PreparedStatement) connexion.prepareStatement(requete) ;
		
		// Remplace, dans la requête, le premier ? par le pseudo reçu en argument
		requetePreparee.setString(1, login);
		
		// Remplace, dans la requête, le second ? par le mot de passe reçu en argument
		requetePreparee.setString(2, mdp);
		
		System.out.println("" + requetePreparee.toString()) ;
		
		// Exécute la requête
		// Requête de consultation (SELECT) donc... executeQuery()
		// Puis, récupère le résultat (0 ou 1 tuple de la table Joueur)
		ResultSet resultat = requetePreparee.executeQuery() ;
		
		System.out.println("*" + resultat.getFetchSize()) ;
		
		boolean connexionOk ;
		
		// Lit la première ligne du résultat
		// et teste si on obtient qqchose
		if(resultat.next()){
			// S'il y a qqchose à lire, c'est que la requête a retourné
			// un tuple qui correspond au joueur
			
			connexionOk = true ;
		}
		else {
			// S'il n'y a rien à lire, c'est que la requête n'a rien retourné...
			// donc pas de joueur avec ce pseudo et ce login
			connexionOk = false ;
		}
		
		// Libère la ressource associée à la requête préparée
		requetePreparee.close();
		
		return connexionOk ;	
	}
	
	public List<Visiteur> getVisiteurs() {
		
		List<Visiteur> lesVisiteurs = new ArrayList<Visiteur>() ;
		String requete = "Select VIS_MATRICULE, VIS_NOM, VIS_PRENOM from VISITEUR " ;
		
		Connection connexion =  null ; 		
		Statement stmt = null ; 		
		ResultSet resultat = null ;
		
		try {
			connexion = ConnexionBD.getConnexion() ;
			stmt = connexion.createStatement() ;
			resultat = stmt.executeQuery(requete) ;
			
		} catch (Exception e){
			
			System.out.println("Get visiteurs raté " + e.getMessage()) ;
			
		}
		finally {
			
			if (resultat != null) {
				
				try {
					while(resultat.next()){
						
							String matricule = resultat.getString("VIS_MATRICULE");
							String nom = resultat.getString("VIS_NOM");
							String prenom = resultat.getString("VIS_PRENOM");
							Visiteur unVisiteur = new Visiteur (matricule, nom, prenom) ;
							lesVisiteurs.add(unVisiteur) ;
							System.out.println(unVisiteur.toString()) ;
						

					}
					resultat.close() ;
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}if (stmt != null){
				try {
					stmt.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		
		
		return lesVisiteurs;
	}
	
	public List<RapportVisite> getRapportVisite(String matricule, String date ){

		List<RapportVisite> lesRapports = new ArrayList<RapportVisite>() ;
		String requete = "Select * from RAPPORT_VISITE R inner join PRATICIEN  P"
				+ " ON R.PRA_NUM = P.PRA_NUM "
				+ " where VIS_MATRICULE = ? and RAP_DATE LIKE ? "
				+ " Order by RAP_DATEREDAC" ; 
		
		Connection connexion =  null ; 		
		PreparedStatement pstmt = null ; 		
		ResultSet resultat = null ;
		
		
		try {
			
			connexion = ConnexionBD.getConnexion() ;
			
			pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
			
			pstmt.setString(1, matricule);
			pstmt.setString(2, date + '%');
			
			resultat = pstmt.executeQuery() ;
			
		} catch (Exception e){
			
			System.out.println("Get rapport raté " + e.getMessage()) ;
			
		} finally {
			
			if (resultat != null) {
				
				try {
					while(resultat.next()){
						
							
							String rap_num = resultat.getString("RAP_NUM");
							String visMatricule = resultat.getString("VIS_MATRICULE");
							String rap_date = resultat.getString("RAP_DATE");
							String rap_motif = resultat.getString("RAP_MOTIF");		
							String rap_bilan = resultat.getString("RAP_BILAN") ;
							String pra_num = resultat.getString("PRA_NUM") ;
							String rap_coef = resultat.getString("RAP_COEFCONFIANCE") ;
							boolean etat = resultat.getBoolean("RAP_ETAT") ;
							String date_redac = resultat.getString("RAP_DATEREDAC");
							String nom_pra = resultat.getString("PRA_NOM");
							String prenom_pra = resultat.getString("PRA_PRENOM");
							String ville_pra = resultat.getString("PRA_VILLE");
							RapportVisite unRapport = new RapportVisite (visMatricule, rap_num, pra_num , rap_date, rap_bilan , rap_motif ,
									rap_coef, etat , date_redac , new Praticien(pra_num,nom_pra, prenom_pra, ville_pra)) ;
							lesRapports.add(unRapport) ; 
							System.out.println(unRapport.toString()) ;
						

					}
					resultat.close() ;
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}if (pstmt != null){
				try {
					pstmt.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
			
		}
		
		return lesRapports ; 	
		
		
	}
	
	public RapportVisite getLeRapportVisite(String matricule, String rap_num ){

		String requete = "Select * from RAPPORT_VISITE where VIS_MATRICULE = ? and RAP_NUM = ? " ; 
		
		RapportVisite unRapport = null; 
		Connection connexion =  null ; 		
		PreparedStatement pstmt = null ; 		
		ResultSet resultat = null ;
		
		
		try {
			
			connexion = ConnexionBD.getConnexion() ;
			
			pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
			
			pstmt.setString(1, matricule);
			pstmt.setString(2, rap_num ) ;
			resultat = pstmt.executeQuery() ;
			
		} catch (Exception e){
			
			System.out.println("Get rapport raté " + e.getMessage()) ;
			
		} finally {
			
			if (resultat != null) {
				
				try {
					while(resultat.next()){
						
							
							String num_rap = resultat.getString("RAP_NUM");
							String visMatricule = resultat.getString("VIS_MATRICULE");
							String rap_date = resultat.getString("RAP_DATE");
							String rap_motif = resultat.getString("RAP_MOTIF");	
							String rap_bilan = resultat.getString("RAP_BILAN") ;
							String pra_num = resultat.getString("PRA_NUM") ;
							String rap_coef = resultat.getString("RAP_COEFCONFIANCE") ;
							boolean etat = resultat.getBoolean("RAP_ETAT") ;
							String date_redac = resultat.getString("RAP_DATEREDAC");
							unRapport = new RapportVisite (visMatricule, num_rap, pra_num , rap_date, rap_bilan , rap_motif , rap_coef, etat, date_redac) ;
							System.out.println(unRapport.toString()) ;
						

					}
					resultat.close() ;
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}if (pstmt != null){
				try {
					pstmt.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
			
		}
		
		return unRapport ;
	}
	
	public boolean consulterRapport(String matricule, String rap_num){

		String requete = "Update RAPPORT_VISITE SET RAP_ETAT = true WHERE VIS_MATRICULE =  ?   AND RAP_NUM = ? " ; 
		
		boolean Ok = false ; 
		RapportVisite unRapport = null; 
		Connection connexion =  null ; 		
		PreparedStatement pstmt = null ; 		
		int resultat = 0 ;
		
		
		try {
			
			connexion = ConnexionBD.getConnexion() ;
			
			pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
			
			pstmt.setString(1, matricule);
			pstmt.setString(2, rap_num ) ;
			
			resultat = pstmt.executeUpdate() ;
			
		} catch (Exception e){
			
			System.out.println("Get rapport raté " + e.getMessage()) ;
			
		} finally {
			
			if (resultat > 0) {
				Ok = true ; 
				
			}if (pstmt != null){
				try {
					pstmt.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
			
		}
		return Ok ;
	}
	
	

	public List<Praticien> getPraticienDate(){
		
		List<Praticien> lstPraticien = new ArrayList<Praticien>();
		//String requete = "SELECT P.PRA_NUM, PRA_NOM, PRA_VILLE, PRA_COEFNOTORIETE, RAP_COEFCONFIANCE, RAP_DATE, RAP_NUM, VIS_MATRICULE "
		String requete = "SELECT  distinct *"
				+ " FROM PRATICIEN P INNER JOIN RAPPORT_VISITE RV ON RV.PRA_NUM = P.PRA_NUM "
				+ " Where RAP_DATE = (Select Max(RAP_DATE) FROM RAPPORT_VISITE where PRA_NUM = P.PRA_NUM ) "
				+ " ORDER BY RAP_DATE ASC ";
        
        Connection connexion =  null ;         
        PreparedStatement pstmt = null ;         
        ResultSet resultat = null ;
        
        
        try{
			try {
				connexion = ConnexionBD.getConnexion() ;
			} catch (ConnexionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
            resultat = pstmt.executeQuery() ;
        	
        } catch (SQLException e) {
            // TODO Auto-generated catch block
        	 System.out.println("Get rapports raté " + e.getMessage()) ;
        }finally {
            
            if (resultat != null) {
                
                try {
                    while(resultat.next()){
                        
                            
                            String pra_num = resultat.getString("PRA_NUM");
                            String rap_date = resultat.getString("RAP_DATE");
                            String coefconfiance = resultat.getString("RAP_COEFCONFIANCE");
                            String coefnoto  = resultat.getString("PRA_COEFNOTORIETE");
                            String pra_nom = resultat.getString("PRA_NOM");
                            String pra_ville = resultat.getString("PRA_VILLE");    
                            RapportVisite unRapport = new RapportVisite(rap_date, pra_num, coefconfiance );
                            Praticien unPraticien = new Praticien ( pra_num, pra_nom, pra_ville, coefnoto, unRapport) ;
                            lstPraticien.add(unPraticien) ;
                            //System.out.println(unPraticien.toString()) ;
                        
                           
                    }
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
		
	}
        return lstPraticien ;
	}	
	
	public List<Praticien> getPraticienCoefConf(){
		
		List<Praticien> lstPraticien = new ArrayList<Praticien>();
		String requete = "SELECT distinct * "
				+ " FROM PRATICIEN P INNER JOIN RAPPORT_VISITE RV ON RV.PRA_NUM = P.PRA_NUM "
				+ " Where RAP_DATE = (Select Max(RAP_DATE) FROM RAPPORT_VISITE where PRA_NUM = P.PRA_NUM )" 
				+ " ORDER BY RV.RAP_COEFCONFIANCE ASC ";
	    
	    Connection connexion =  null ;         
	    PreparedStatement pstmt = null ;         
	    ResultSet resultat = null ;
	    
	    try{
			try {
				connexion = ConnexionBD.getConnexion() ;
			} catch (ConnexionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
	        resultat = pstmt.executeQuery() ;
	    	
	    } catch (SQLException e) {
	        // TODO Auto-generated catch block
	    	 System.out.println("Get rapports raté " + e.getMessage()) ;
	    }finally {
	        
	        if (resultat != null) {
	            
	            try {
	                while(resultat.next()){
	                    
	                        
	                        String pra_num = resultat.getString("PRA_NUM");
	                        String rap_date = resultat.getString("RAP_DATE");
	                        String coefconfiance = resultat.getString("RAP_COEFCONFIANCE");
	                        String coefnoto  = resultat.getString("PRA_COEFNOTORIETE");
	                        String pra_nom = resultat.getString("PRA_NOM");
	                        String pra_ville = resultat.getString("PRA_VILLE");    
	                        RapportVisite unRapport = new RapportVisite(rap_date,pra_num, coefconfiance );
	                        Praticien unPraticien = new Praticien ( pra_num, pra_nom, pra_ville, coefnoto, unRapport) ;
	                        lstPraticien.add(unPraticien) ;
	                        System.out.println(unPraticien.toString()) ;
	                    
	
	                }
	            } catch (SQLException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
		
	}
	    return lstPraticien ;
	}	
	
	public List<Praticien> getPraticienCoefNoto(){
		
		List<Praticien> lstPraticien = new ArrayList<Praticien>();
		String requete = " Select *"
				+ " FROM PRATICIEN P INNER JOIN RAPPORT_VISITE RV ON RV.PRA_NUM = P.PRA_NUM "
				
				+ " Where RAP_DATE = (Select Max(RAP_DATE) FROM RAPPORT_VISITE where PRA_NUM = P.PRA_NUM ) " 
				+ " ORDER BY PRA_COEFNOTORIETE DESC ";
				
		
	    
	    Connection connexion =  null ;         
	    PreparedStatement pstmt = null ;         
	    ResultSet resultat = null ;
	    
	    try{
			try {
				connexion = ConnexionBD.getConnexion() ;
			} catch (ConnexionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
	        resultat = pstmt.executeQuery() ;
	    	
	    } catch (SQLException e) {
	        // TODO Auto-generated catch block
	    	 System.out.println("Get rapports raté " + e.getMessage()) ;
	    }finally {
	        
	        if (resultat != null) {
	            
	            try {
	                while(resultat.next()){
	                    
	                        
	                        String pra_num = resultat.getString("PRA_NUM");
	                        String rap_date = resultat.getString("RAP_DATE");
	                        String coefconfiance = resultat.getString("RAP_COEFCONFIANCE");
	                        String coefnoto  = resultat.getString("PRA_COEFNOTORIETE");
	                        String pra_nom = resultat.getString("PRA_NOM");
	                        String pra_ville = resultat.getString("PRA_VILLE");    
	                        RapportVisite unRapport = new RapportVisite(rap_date, pra_num, coefconfiance );
	                        Praticien unPraticien = new Praticien ( pra_num, pra_nom, pra_ville, coefnoto, unRapport) ;
	                        lstPraticien.add(unPraticien) ;
	                        System.out.println(unPraticien.toString()) ;
	                    
	
	                }
	            } catch (SQLException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
		
	}
	    return lstPraticien ;
	}	
	
	
	public Praticien getUnPraticien(String pra_num1){
		
		Praticien unPraticien = new Praticien ();
		String requete = "SELECT P.PRA_NUM, PRA_NOM, PRA_VILLE, PRA_COEFNOTORIETE, RAP_COEFCONFIANCE, RAP_DATE "
				+ " FROM PRATICIEN P INNER JOIN RAPPORT_VISITE RV ON RV.PRA_NUM = P.PRA_NUM "
				+ " WHERE P.PRA_NUM = ? ";
	    
	    Connection connexion =  null ;         
	    PreparedStatement pstmt = null ;         
	    ResultSet resultat = null ;
	    
	    try{
			try {
				connexion = ConnexionBD.getConnexion() ;
			} catch (ConnexionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
	        pstmt.setString(1, pra_num1);
	        resultat = pstmt.executeQuery() ;
	    	
	    } catch (SQLException e) {
	        // TODO Auto-generated catch block
	    	 System.out.println("Get rapports raté " + e.getMessage()) ;
	    }finally {
	        
	        if (resultat != null) {
	            
	            try {
	                while(resultat.next()){
	                    
	                        
	                        String pra_num = resultat.getString("PRA_NUM");
	                        String rap_date = resultat.getString("RAP_DATE");
	                        String coefconfiance = resultat.getString("RAP_COEFCONFIANCE");
	                        String coefnoto  = resultat.getString("PRA_COEFNOTORIETE");
	                        String pra_nom = resultat.getString("PRA_NOM");
	                        String pra_ville = resultat.getString("PRA_VILLE");    
	                        RapportVisite unRapport = new RapportVisite(coefconfiance, rap_date );
	                       // unPraticien.setRapport(unRapport);
	                        unPraticien.setCoefNotoriete(coefnoto);
	                        unPraticien.setNom(pra_nom);;
	                        unPraticien.setPra_num(pra_num);
	                        unPraticien.setVille(pra_ville);
	                        System.out.println(unPraticien.toString()) ;
	                    
	
	                }
	            } catch (SQLException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
		
	}
	    return unPraticien ;
	}

	
public List<Praticien> getPraticiens(){
		
		List<Praticien> lstPraticien = new ArrayList<Praticien>();
		String requete = "SELECT distinct * "
				+ " FROM PRATICIEN P INNER JOIN RAPPORT_VISITE RV ON RV.PRA_NUM = P.PRA_NUM "
				+ " Where RAP_DATE = (Select Max(RAP_DATE) FROM RAPPORT_VISITE where PRA_NUM = P.PRA_NUM )" ;
	    
	    Connection connexion =  null ;         
	    PreparedStatement pstmt = null ;         
	    ResultSet resultat = null ;
	    
	    try{
			try {
				connexion = ConnexionBD.getConnexion() ;
			} catch (ConnexionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        pstmt = (PreparedStatement) connexion.prepareStatement(requete) ;
	        resultat = pstmt.executeQuery() ;
	    	
	    } catch (SQLException e) {
	        // TODO Auto-generated catch block
	    	 System.out.println("Get rapports raté " + e.getMessage()) ;
	    }finally {
	        
	        if (resultat != null) {
	            
	            try {
	                while(resultat.next()){
	                    
	                        
	                        String pra_num = resultat.getString("PRA_NUM");
	                        String rap_date = resultat.getString("RAP_DATE");
	                        String coefconfiance = resultat.getString("RAP_COEFCONFIANCE");
	                        String coefnoto  = resultat.getString("PRA_COEFNOTORIETE");
	                        String pra_nom = resultat.getString("PRA_NOM");
	                        String pra_ville = resultat.getString("PRA_VILLE");    
	                        RapportVisite unRapport = new RapportVisite(rap_date,pra_num, coefconfiance );
	                        Praticien unPraticien = new Praticien ( pra_num, pra_nom, pra_ville, coefnoto, unRapport) ;
	                        lstPraticien.add(unPraticien) ;
	                        System.out.println(unPraticien.toString()) ;
	                    
	
	                }
	            } catch (SQLException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
		
	}
	    return lstPraticien ;
	}	


	
	public static void setModele(ModeleAppliRV modele) {
		ModeleAppliRV.modele = modele;
	}
	
	
	
	
	
	
	
	
	
	
}
